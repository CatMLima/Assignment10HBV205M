<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>is.hi.cs</groupId>
	<artifactId>MoneyStackWithMaven</artifactId>
	<version>1.1.0</version>

	<name>Money and Stack with Maven that also is an Eclipse project</name>

	<developers>
		<developer>
			<name>Helmut Neukirchen</name>
			<url>http://uni.hi.is/helmut/</url>
		</developer>
	</developers>
	<organization>
		<name>University of Iceland</name>
		<url>https://www.hi.is/</url>
	</organization>
	<licenses>
		<license>
			<name>MIT License</name>
			<url>http://www.opensource.org/licenses/mit-license.php</url>
		</license>
	</licenses>
	<scm>
		<connection>scm:git:https://gitlab.com/helmut.neukirchen/moneystackwithmaven.git</connection>
		<url>https://gitlab.com/helmut.neukirchen/moneystackwithmaven</url>
	</scm>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- Custom property "java.version"; can be referenced via ${ } -->
		<java.version>17</java.version> <!-- If "17" does not work, try the version of your JDK -->
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<maven.compiler.release>${java.version}</maven.compiler.release> <!-- Only understood by JDK >= 9 -->
	</properties>


	<dependencies>
		<!-- JUnit 4 (depends itself on hamcrest core 1.3-->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>5.1.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>

			<!-- maven-compiler-plugin >= 3.6.0 needed for property maven.compiler.release -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.9.0</version>
			</plugin>

			<!-- surefire >= 2.22.0 needed for JUnit5 -->
			<!-- We also want to pass project specific configurations -->
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<!-- >=2.22.0 needed for JUnit5 -->
				<version>3.0.0-M7</version>
				<configuration>
				<?ignore
					<!-- Includes can be overriden on commandline using mvn test -Dtest=NameOfTestClass 
						- however -Dtest does not work if the class contains a JUnit5-style suite -->
					<includes>
						<include>AlltestsUsingSelectClasses</include>
					</includes>
				?>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.pitest</groupId>
				<artifactId>pitest-maven</artifactId>
				<version>1.18.2</version>
				<configuration>
					<targetClasses>
						<param>Money</param>
						<param>MoneyStack</param>
					</targetClasses>
					<targetTests>
						<param>MoneyStackSumTest</param>
						<param>MoneyStackWithFixtureTest</param>
						<param>MoneyWithFixtureTest</param>
					</targetTests>
				</configuration>
			</plugin>

			<!-- Code coverage -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.7</version>
				<executions>
					<!-- Prepare-agent called at initialize phase in order to instrument code -->
					<execution>
						<id>pre-unit-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>

					<!-- Make report generation (in target/site/jacoco/) bound to test phase (instead of verify phase) -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>

					<!-- Checks when running mvn verify whether coverage goal has been met; abort build, if not -->
					<execution>
						<id>verify-eightypercentcoverage</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<rule>
									<!-- Coverage on BUNDLE (whole program average) needs to be reached, opposed to, e.g. every class on its own  -->
									<element>BUNDLE</element>
									<limits>
										<limit>
											<counter>BRANCH</counter>
											<!-- Ratio (opposed to, e.g., absolute values -->
											<value>COVEREDRATIO</value>
											<!-- minimum=at least, value=80 percent -->
											<minimum>0.8</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

</project>